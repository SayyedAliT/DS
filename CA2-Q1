from operator import truediv
import sys
import re


class Queue:
    def __init__(self):
        self.queue = list()

    def getSize(self):
        return len(self.queue)

    def enqueue(self, value):
        self.queue.append(value)

    def dequeue(self):
        if(self.isEmpty() == False):
            self.queue.pop()

    def isEmpty(self):
        return self.getSize() == 0
    

    def getInOneLine(self):
        output = ""
        for index in self.queue :
            output+= str(index) + " "
        return output[:len(output)-1]


class Stack:
    def __init__(self, size=10):
        self.stack = [0 for i in range(size)]
        self.top = -1

    def isEmpty(self):
        return self.top == -1
        

    def push(self, value):
        self.top +=1
        self.stack[self.top] = value

    def pop(self):
        value = self.stack[self.top]
        self.top -=1
        return value

    def put(self, value):
        pass

    def peek(self):
        pass

    def expand(self):
        pass

    def getInOneLine(self):
        pass

    def getSize(self):
        pass

    def getCapacity(self):
        pass


class Node:
    def __init__(self, val):
        pass


class LinkedList:
    def __init__(self):
        pass

    def getList(self):
        pass

    def insertFront(self, new_data):
        pass

    def insertEnd(self, new_data):
        pass

    def reverse(self):
        pass


class Runner:
    dsMap = {'stack': Stack, 'queue': Queue, 'linked_list': LinkedList}
    callRegex = re.compile(r'^(\w+)\.(\w+)\(([\w, ]*)\)$')

    def __init__(self, inputSrc):
        self.input = inputSrc
        self.items = {}

    def run(self):
        for line in self.input:
            line = line.strip()
            action, _, param = line.partition(' ')
            actionMethod = getattr(self, action, None)
            if actionMethod is None:
                return
            actionMethod(param)

    def make(self, params):
        itemType, itemName = params.split()
        self.items[itemName] = self.dsMap[itemType]()

    def call(self, params):
        regexRes = self.callRegex.match(params)
        itemName, funcName, argsList = regexRes.groups()
        args = argsList.split(',') if argsList != '' else []

        method = getattr(self.items[itemName], funcName)
        result = method(*args)
        if result is not None:
            print(result)


def main():
    runner = Runner(sys.stdin)
    runner.run()


if __name__ == "__main__":
    main()
